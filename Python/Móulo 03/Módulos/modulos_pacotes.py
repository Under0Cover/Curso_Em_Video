# MÓDULOS E PACOTES
# FASE 22

# MÓDULOS #
# --- CONCEITOS ---
# MODULARIZAR É O ATO DE CONSTRUIR MÓDULOS
# O CONCEITO DE MODULARIZAÇÃO SURGIU NO INÍCIO DA DÉCADA DE 60
# ÉPOCA EM QUE OS PROGRAMAS CHEGARAM NAS EMPRESAS
# E OS SISTEMAS ESTAVAM FICANDO CADA VEZ MAIORES
# UM PROGRAMA MAIOR EXIGE MAIS LINHAS DE CÓDIGO
# E COM ISSO TRAZ MAIS DIFICULDADES PARA MANUTENÇÃO E ATUALIZAÇÃO
# FOCO PRINCIPAL DIVIDIR UM PROGRAMA GRANDE EM VÁRIOS PROGRAMAS PEQUENOS
# FOCO SECUNDÁRIO AUMENTAR A LEGIBILIDADE
# AUMENTANDO ASSIM A FACILIDADE DE MANUTENÇÃO E ATUALIZAÇÃO

# VAMOS UTILIZAR A MODULARIZAÇÃO COM O FOCO DE DIVIDIR OS PROGRAMAS

# --- TEORIA E PRÁTICA ---
'''
# FUNÇÕES
def fatorial(numero):
    fator = 1
    for contador in range(1, numero + 1):
        # AQUI A SOMA É UTILIZADA POR CONTA DAQUELE DETALHE DO RANGE NO PYTHON
        # O RANGE VAI ATÉ UM NÚMERO ANTES, COM A SOMA, OBRIGAMOS ELE A IR ATÉ O NÚMERO QUE DESEJAMOS
        fator *= contador
    return fator


def dobro(numero):
    return numero * 2


def triplo(numero):
    return numero * 3
# FUNÇÕES QUE ESTÃO EM OUTRO ARQUIVO PARA MODULARIZAR
'''
# IMPORT
import uteis
# COM ESSE COMANDO ESTAMOS MODULARIZANDO AS FUNÇÕES NO NOSSO PROGRAMA PRINCIPAL

# PROGRAMA PRINCIPAL
numero = int(input('Digite um valor: '))
fatorar = uteis.fatorial(numero)
print(f'O fatorial de {numero} é {fatorar}')
print(f'O dobro de {numero} é {uteis.dobro(numero)}')
print(f'O triplo de {numero} é {uteis.triplo(numero)}')

# OUTROS EXEMPLOS DE MODULARIZAÇÃO JÁ UTILIZADOS AO LONGO DO CURSO
# FROM UTEIS IMPORT FATORIAL
# FROM MATH IMPORT SQRT
# FROM DATETIME IMPORT DATETIME
# FROM RANDOM IMPORT RANDINT


# --- VANTAGENS DA MODULARIZAÇÃO --- #
# -> ORGANIZAÇÃO DO CÓDIGO
# -> FACILITA NA MANUTENÇÃO DO CÓDIGO
# -> OCULTAÇÃO DO CÓDIGO DETALHADO
# -> REUTILIZAÇÃO EM OUTROS PROJETOS

# PACOTES #
# --- CONCEITOS ---
# ATÉ O MOMENTOS TEMOS UM ARQUIVO CHAMADO UTEIS.PY COMO O ARQUIVO DE MODULARIZAÇÃO DAS NOSSAS FUNÇÕES
# E O QUE ACONTECE SE O ARQUIVO DE MODULARIZAÇÃO FICAR GRANDE DE MAIS?
# O QUE ACONTECE SE EU TIVER VÁRIAS FUNÇÕES NO MEU ARQUIVO?
# CASO ISSO ACONTEÇA. TODOS OS PROBLEMAS AINDA EXISTEM
# A ÚNICA DIFERENÇA É QUE ESSE PROBLEMA FOI TRANSFERIDO PARA UM OUTRO ARQUIVO
# A SOLUÇÃO ENTÃO? CRIAR VÁRIOS MÓDULOS
# O PACOTE NADA MAIS É DO QUE UMA PASTA COM VÁRIOS ARQUIVOS DE MODULARIZAÇÃO
# ARQUIVOS ESSES SEPARADOS POR FUNÇÕES TEMÁTICAS
# IMPORTAÇÃO CONTINUA DA MESMA FORMA SE QUISER IMPORTAR O PACOTE COMPLETO
# E ALÉM DISSO, AINDA TEM A OPÇÃO DE IMPORTAR OS PACOTES TEMÁTICOS
# from uteis import datas
# PARA UTILIZAR AS FUNÇÕES RELACIONADAS AS DATAS
# LEMBRANDO QUE TODO ARQUIVO .PY PODE SER UM MÓDULO
# PACOTES SÃO UTILIZADOS PARA PROJETOS REALMENTE GRANDES
# PARA PROJETOS QUE NÃO SÃO TÃO GRANDES, O MÓDULO RESOLVE OS PROBLEMAS
